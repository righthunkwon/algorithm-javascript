// sort()
// 원본 배열을 정렬(destructive)
// 정렬 전 내부적으로 배열 내의 값을 문자열로 변환
// 따라서, 숫자를 정렬할 때는 인자로 콜백함수를 받아 별도의 작업이 필요
// 원본 배열을 수정하고 싶지 않다면 배열을 복제하여 정렬하는 toSorted() 사용

[3, 1, 2].sort(); // [1, 2, 3] (올바른 정렬)
[100, 3, 1, 20].sort(); // [1, 100, 20, 3] (잘못된 정렬)
[-3, 2, 0, 1, 3, -2, -1].sort(); // [-1, -2, -3, 0, 1, 2, 3] (잘못된 정렬)

// 오름차순(정방향) 정렬 .sort((a, b) => a - b);
// 내림차순(역방향) 정렬 .sort((a, b) => b - a);

// 첫 번째 인자가 두 번째 인자보다 크면     > 자리 바꿈(양수 리턴 시)
// 첫 번째 인자가 두 번째 인자보다 작으면   > 자리 안 바꿈(음수 리턴 시)
// 첫 번째 인자가 두 번째 인자와 같으면     > 자리 안 바꿈(0 리턴 시)

// [-3, -2, -1, 0, 1,  2,  3] (오름차순 정렬)
[-3, 2, 0, 1, 3, -2, -1].sort((a, b) => a - b);

// [3, 2, 1, 0, -1, -2, -3] (내림차순 정렬)
[-3, 2, 0, 1, 3, -2, -1].sort((a, b) => b - a);
